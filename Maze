#include <iostream>
#include <vector>
#include <queue>
#include <cstdlib>
#include <ctime>
#include <cmath>
#include <algorithm>
#include <SFML/Graphics.hpp>

using namespace std;

struct Cell {
    int x, y;
    Cell(int x, int y) : x(x), y(y) {}
};

struct Node {
    int x, y, cost, heuristic;
    Node* parent;
    Node(int x, int y, Node* parent = nullptr) : x(x), y(y), parent(parent), cost(0), heuristic(0) {}
    int getScore() const { return cost + heuristic; }
};

bool operator<(const Node& a, const Node& b) {
    return a.getScore() > b.getScore(); 
}

class Maze {
private:
    int width, height;
    vector<vector<int>> grid;

public:
    Maze(int width, int height) : width(width), height(height) {
        grid.resize(height, vector<int>(width, 1)); // 1 represents walls
    }

    void generateMaze() {
    srand(time(0));  // Seed for random number generation

    int startX = rand() % width;
    int startY = rand() % height;
    grid[startY][startX] = 0;  // 0 represents passages

    vector<Cell> frontier;
    frontier.push_back(Cell(startX, startY));

    while (!frontier.empty()) {
        int randIndex = rand() % frontier.size();
        Cell current = frontier[randIndex];
        frontier.erase(frontier.begin() + randIndex);

        vector<Cell> neighbors = getNeighbors(current.x, current.y);
        for (auto& n : neighbors) {
            if (isValidNextCell(n.x, n.y)) {
                grid[n.y][n.x] = 0;  // Make it a passage
                // Knock down the wall between
                
                //the wallX and wallY are the coordinates of the cell in between the cureent and the neighbour 
                int wallX = (current.x + n.x) / 2;
                int wallY = (current.y + n.y) / 2;
                ////converts the wall cell into a passage, effectively connecting the current cell and its neighbor without any barrier.
				grid[wallY][wallX] = 0;
                frontier.push_back(n);
            }
        }
    }
}

    void printMaze() {
        for (int y = 0; y < height; ++y) {
            for (int x = 0; x < width; ++x) {
                cout << (grid[y][x] == 1 ? '#' : ' ');
            }
            cout << endl;
        }
    }

    vector<Cell> findPathAStar(Cell start, Cell end) {
        auto compare = [](const Node* a, const Node* b) { return a->getScore() > b->getScore(); };
        // A priority queue named openSet is initialized to hold nodes yet to be explored
        priority_queue<Node*, vector<Node*>, decltype(compare)> openSet(compare);

        Node* startNode = new Node(start.x, start.y);
        startNode->cost = 0;
        startNode->heuristic = abs(start.x - end.x) + abs(start.y - end.y);
        openSet.push(startNode);

        vector<vector<bool>> closedSet(height, vector<bool>(width, false));
        //A 2D vector named closedSet tracks which cells have been visited. If a cell is visited,its
        //corresponding position in closedSet is marked true.
        //This prevents revisiting cells, optimizing the search process

        while (!openSet.empty()) {

            //The algorithm enters a loop that continues as long as there are nodes in the open set. 
            //It processes the node with the lowest F score first, considering it as the current node
            Node* currentNode = openSet.top();
            openSet.pop();

            if (currentNode->x == end.x && currentNode->y == end.y) {
                return reconstructPath(currentNode);
            }
            //The current node's position is marked as visited in the closedSet
            closedSet[currentNode->y][currentNode->x] = true;


            //The function iterates over the current node's neighbors (up, right, down, left).
            //For each neighbor, it calculates the neighbor's coordinates

            vector<Cell> directions = {{0, -1}, {1, 0}, {0, 1}, {-1, 0}};
            for (Cell dir : directions) {
                int nextX = currentNode->x + dir.x;
                int nextY = currentNode->y + dir.y;
                //The function iterates over the current node's neighbors (up, right, down, left).
                //For each neighbor, it calculates the neighbor's coordinates.
                
                //it checks if it's a passage and not visited and if it is valid 
                if (nextX >= 0 && nextX < width && nextY >= 0 && nextY < height &&
                    grid[nextY][nextX] == 0 && !closedSet[nextY][nextX]) {

                    Node* neighbor = new Node(nextX, nextY, currentNode);
                    neighbor->cost = currentNode->cost + 1;
                    neighbor->heuristic = abs(nextX - end.x) + abs(nextY - end.y);
                    openSet.push(neighbor);
                //For each neighbor, the function checks if it is within the bounds of the maze, not an obstacle, 
                //and not already visited. If the neighbor is valid,it creates a new node for the neighbor,
                //sets its cost and heuristic, and adds it to the open set. The cost is incremented by 1 from the currentNode

                }
            }
        }

        return vector<Cell>(); // Return empty path if no path is found
 }
 
   void draw(sf::RenderWindow& window) {
   	
   		//The maze grid is divided evenly across the window, with each cell's width and height calculated based on the window's dimensions and the maze dimensions
	    float cellWidth = window.getSize().x / width;
	    float cellHeight = window.getSize().y / height;
	
	    for (int y = 0; y < height; ++y) {
	        for (int x = 0; x < width; ++x) {
				//sf::RectangleShape: Creates a rectangular shape object with the specified dimensions. It represents a single cell in the maze.
	            sf::RectangleShape cell(sf::Vector2f(cellWidth, cellHeight));
				//Sets the position of the rectangle in the window
	            cell.setPosition(x * cellWidth, y * cellHeight);
	            //Sets the color of the rectangle
	            cell.setFillColor(grid[y][x] == 1 ? sf::Color::Black : sf::Color::White);
	            window.draw(cell);
	        }
	    }
	}
	//to visualize the path fiund by the A*algorithm 
	
	void drawPath(sf::RenderWindow& window, const vector<Cell>& path) {
	    float cellWidth = window.getSize().x / width;
	    float cellHeight = window.getSize().y / height;
	    sf::RectangleShape cell(sf::Vector2f(cellWidth, cellHeight));
	    cell.setFillColor(sf::Color::Red);
	
	    for (const Cell& step : path) {
	        cell.setPosition(step.x * cellWidth, step.y * cellHeight);
	        window.draw(cell);
	    }
	}

private:
    //method checks if converting the current cell into a passage is valid 
    //such as ensuring that converting this cell does not create a loop in the maze
    //by having more than one adjacent passage.

   bool isValidNextCell(int x, int y) {
    if (x < 0 || y < 0 || x >= width || y >= height || grid[y][x] == 0) return false;
    return true;  // Simplify to checking if the cell is a wall and in bounds
}

//This function returns potential neighbors that are two cells away in either the horizontal or vertical direction.
//This ensures that there is always one cell (a wall) between the current cell and the neighbor, which can be removed to create a continuous passage.
vector<Cell> getNeighbors(int x, int y) {
    vector<Cell> neighbors;
    if (x > 1 && grid[y][x-2] == 1) neighbors.push_back(Cell(x - 2, y));
    if (x < width - 2 && grid[y][x+2] == 1) neighbors.push_back(Cell(x + 2, y));
    if (y > 1 && grid[y-2][x] == 1) neighbors.push_back(Cell(x, y - 2));
    if (y < height - 2 && grid[y+2][x] == 1) neighbors.push_back(Cell(x, y + 2));
    return neighbors;
}


    //The reconstructPath function traces back from the end node to the start node using the parent pointers of the nodes
    //creating a sequence of cells representing the path taken.
    vector<Cell> reconstructPath(Node* node) {
        vector<Cell> path;
        while (node != nullptr) {
            path.emplace_back(node->x, node->y);
            Node* temp = node;
            node = node->parent;
            delete temp; // Clean up dynamically allocated memory
        }
        reverse(path.begin(), path.end());
        return path;
    }
    
};
int main() {
    int width = 21;
    int height = 21;
    Maze maze(width, height);
    maze.generateMaze();

    sf::RenderWindow window(sf::VideoMode(600, 600), "Maze and Pathfinding Visualization");

    Cell start(0, 0);
    Cell end(width - 1, height - 1);
    vector<Cell> path = maze.findPathAStar(start, end);

    while (window.isOpen()) {
        sf::Event event;
        while (window.pollEvent(event)) {
            if (event.type == sf::Event::Closed)
                window.close();
        }

        window.clear();
        maze.draw(window);
        if (!path.empty()) {
            maze.drawPath(window, path);
        }
        window.display();
    }

    return 0;
}
